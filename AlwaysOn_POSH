#==============================================
# Generated On: 25/05/2015
# Generated By: Grant Orchard
# Organization: VMware
# Twitter: @grantorchard
# vRealize Application Services
# SQL AlwaysOn Install and Configure v1
#==============================================
#----------------------------------------------
#==================USAGE=======================
# Tested on Windows Server 2012 R2 with SQL 2012
# This script has been created to aid in 
# performing the AlwaysOn install and config.
#----------------------------------------------
#===============REQUIREMENTS===================
# For this script to run successfully be sure:
# 	* NTRights.exe is accessible from your VMs
#	* you have admin rights on the server
#----------------------------------------------
#=================VARIABLES====================
# If you're downloading this script independent
# of the application blueprint, you will need to
# add the following variables to your application
# blueprint:
#
# $logDirectory="c:\logs"
#
# $logfile="$logdirectory\AlwaysOnInstall.log"
#
# $nodeIndex {
#    TYPE:string
#    BLUEPRINT VALUE:bind to another property in 
#      this blueprint (self:node_array_index)
# }
#
# $clusterNodes {
#    TYPE:string
#    BLUEPRINT VALUE:bind to another property in 
#      this blueprint (all(Windows_Server_2012_R2_v1.0:hostname)
#    COMMENT:the actual value for this will vary based
#      on your logical template name.
# }
#
# $instance {
#    TYPE:string
#    BLUEPRINT VALUE:bind to another property in 
#      this blueprint (all(Windows_Server_2012_Enterprise_Edition `
#      _v1.0:INSTANCE_NAME)
#    COMMENT:the actual value for this will vary based
#      on your logical template name.
# } 
#
# $AOEndpointName = "AlwaysOnEndpoint"
#
# $AOPort = "5022"
#
# $AOEncryptionAlgorithm = "AES"
#
# $SQLSVCAccount = "whatever you want it to be in domain\user format.
#     Note that I had to use '"domain\username"' when testing this manually"
#
# $SQLPermissionQry="
# USE [master]
# GO
# CREATE LOGIN $SQLSVCAccount FROM WINDOWS WITH DEFAULT_DATABASE=[master]
# GO
# GRANT ALTER ANY AVAILABILITY GROUP TO $SQLSVCAccount
# GO
# GRANT CONNECT SQL TO $SQLSVCAccount
# GO
# GRANT VIEW SERVER STATE TO $SQLSVCAccount
# GO
# " 
#
# $sqlAdminAccount="sa" #this is needed to run the above query, since 
#   you can't modify your own permissions
#
# $sqlAdminPassword =""  
#
# $hostname {
#    TYPE:string
#    BLUEPRINT VALUE:bind to another property in 
#      this blueprint (self:hostname)
# }
#
# $FileSharePath = "\\share\folder" # this will be used for DB backups
#
# $clusterNodesNot0 = ($clusterNodes | select -skip 1)
# 
# $AGListenerName="listener name"
#
# $ListenerIP="x.x.x.x"
#
# $ListenerMask="x.x.x.x."
#
#----------------------------------------------
#===============LOGGING===================
New-Item $logdirectory -type directory
New-Item $logfile -type file
Function Write-StatusUpdate ($Msg) {
	"$(Get-Date): $Msg`r" | Out-File -Filepath $logfile -Append -Encoding UTF8
}
#===============GETTING STARTED===================
Write-StatusUpdate ("Starting AlwaysOn Installation...")
if ($NodeIndex -eq 0) {
#Set execution policy
Set-ExecutionPolicy unrestricted -scope Process -force
Set-ExecutionPolicy unrestricted -scope CurrentUser -force

# Import SQLPS Module
Import-Module “sqlps” -DisableNameChecking
Write-StatusUpdate ("Done!")
#----------------------------------------------
#===============ENABLE ALWAYSON===================
Write-Status ("Enabling AlwaysOn...")
foreach ($node in $clusterNodes) {
$ServerInstance = $node+"\"+$instance
Enable-SqlAlwaysOn –ServerInstance $ServerInstance -force
}
Write-StatusUpdate ("Done!")
#----------------------------------------------
#===============ENDPOINT CONFIGURATION===================
Write-StatusUpdate ("Beginning Endpoint Configuration...")
# create endpoints
foreach ($node in $clusterNodes) {
$AOPath = "SQLSERVER:\SQL\$node\$instance"
New-SqlHadrEndpoint -Path $AOPath -Name $AOEndpointName -Port $AOPort -EncryptionAlgorithm $AOEncryptionAlgorithm 

# start the endpoint
$AOPath = "SQLSERVER:\SQL\$node\$instance\endpoints\AlwaysOnEndpoint"
Set-SqlHadrEndpoint –Path $AOPath –State "Started";
}

# set endpoint permissions
foreach ($node in $clusterNodes) {
$ServerInstance = $node+"\"+$instance
Invoke-Sqlcmd -username $sqlAdminAccount -password $sqlAdminPassword -Query $SQLPermissionQry -ServerInstance $ServerInstance 
}
Write-StatusUpdate ("Done!")
#----------------------------------------------
#===============ALWAYSON DB CREATION===================
Write-StatusUpdate ("Creating the first DB for AlwaysOn")
$AOPath = "SQLSERVER:\SQL\$hostname\$instance"
$svr = Get-Item $AOPath
$db1 = New-Object Microsoft.SqlServer.Management.Smo.Database($svr, $AODB);
$db1.Create();
Write-StatusUpdate ("Done!")
#----------------------------------------------
#===============DATABASE OPERATIONS===================
Write-StatusUpdate ("Starting Database Backup and Restore operations")

# Backup from Primary
cd "SQLSERVER:\SQL\$hostname\$instance\databases"
Backup-SqlDatabase –ServerInstance "$hostname\$instance" –Database $AODB;
Backup-SqlDatabase –ServerInstance "$hostname\$Instance" –Database $AODB –BackupFile "$FileSharePath$AODB.bak";
Backup-SqlDatabase –ServerInstance "$hostname\$Instance" –Database $AODB –BackupAction Log –BackupFile "$FileSharePath$AODB.trn";

# Restore to Secondary(s)
cd "SQLSERVER:\SQL\$hostname\$instance"
foreach ($node in $clusterNodesNot0) {
$ServerInstance = $node+"\"+$instance
Restore-SqlDatabase –ServerInstance "$node\$Instance" –Database $AODB –BackupFile "$FileSharePath$AODB.bak" –NoRecovery;
Restore-SqlDatabase –ServerInstance "$node\$Instance" –Database $AODB –RestoreAction Log –BackupFile "$FileSharePath$AODB.trn" –NoRecovery;
}
Write-StatusUpdate ("Done!")
#----------------------------------------------
#===============CREATE ALWAYSON REPLICAS===================
Write-StatusUpdate ("Creating AlwaysOn Replicas")

# Create replica on primary
$PrimaryRepTCP = "TCP://$hostname$AGDomain" + ':' + "$AOPort"
$Primary = new-sqlavailabilityreplica -Name "$hostname\$instance" -EndpointUrl $PrimaryRepTCP -ConnectionModeInPrimaryRole "AllowAllConnections" -ConnectionModeInSecondaryRole "AllowAllConnections" –AvailabilityMode "SynchronousCommit" –FailoverMode "Automatic" -AsTemplate -Version 11;
$AvailabilityReplicas = @($Primary)

# Create replica on secondary(s)
foreach ($node in $clusterNodesNot0) {
$serverInstance = $node+"\"+$instance
$SecondaryRepTCP = "TCP://$node$AGDomain" + ':' + "$AOPort"
$Secondary = new-sqlavailabilityreplica -Name "$node\$Instance" -EndpointUrl $SecondaryRepTCP -ConnectionModeInSecondaryRole "AllowAllConnections" –AvailabilityMode "SynchronousCommit" –FailoverMode "Automatic" -AsTemplate -Version 11;
$AvailabilityReplicas += $Secondary
}
Write-StatusUpdate ("Done!")
#----------------------------------------------
#===============CREATING AVAILABILITY GROUP===================
Write-StatusUpdate ("Creating Availability Group...")

# AG creation on primary
$ag = New-SqlAvailabilityGroup -Name $AGName -AvailabilityReplica $AvailabilityReplicas -Database $AODB -Path "SQLSERVER:\SQL\$hostname\$instance"
Write-StatusUpdate ("Done!")

# Join secondary(s) to availability group
foreach ($node in $clusterNodesNot0) { 
$AOPath = "SQLSERVER:\SQL\$node\$instance"
Join-SqlAvailabilityGroup –Path $AOPath –Name $AGName;
}

# Add replica DBs to availability group
foreach ($node in $clusterNodesNot0) {
$AGPath = "SQLSERVER:\SQL\$node\$instance\AvailabilityGroups\$AGName"
Add-SqlAvailabilityDatabase –Path $AGPath –Database $AODB
}
#----------------------------------------------
#===============CREATE A LISTENER===================
Write-StatusUpdate ("Starting AlwaysOn Installation")
$AGPath = "SQLSERVER:\SQL\$hostname\$instance\AvailabilityGroups\$AGName"
$ag = Get-Item $AGPath; 
New-SqlAvailabilityGroupListener -Name $AGListenerName –Path $AGPath –StaticIp "$ListenerIP\$ListenerMask" –Port $ListenerPort;
Write-StatusUpdate ("Done!")
#----------------------------------------------
Write-StatusUpdate ("SQL AlwaysOn Installation Complete")
}
